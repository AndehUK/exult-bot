datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator db {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 5
}

// Command Usage Tracking
model Usage {
    command_name String
    invoker_id   BigInt
    uses         Int

    @@id([command_name, invoker_id])
}

// Guilds the bot is currently joined to or has recently been removed from
model Guild {
    guild_id BigInt    @id
    expires  DateTime?
    premium  Boolean   @default(false)
    
    logging_config LoggingConfig[]

    members Member[]
}

// Users the bot shares servers with (Global Data)
model User {
    user_id BigInt @id

    member_data Member[]
}

// Users the bot shares servers with (Guild Data)
model Member {
    member_id BigInt
    guild_id  BigInt

    user  User  @relation(fields: [member_id], references: [user_id], onDelete: Cascade)
    guild Guild @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@id([member_id, guild_id])
}

// Log Events
enum LogEvent {
    on_guild_channel_delete
    on_guild_channel_create
    on_guild_channel_update
    on_guild_update
    on_guild_emojis_update
    on_guild_stickers_update
    on_invite_create
    on_invite_delete
    on_webhooks_update
    on_member_join
    on_member_remove
    on_member_update
    on_user_update
    on_member_ban
    on_member_unban
    on_message_edit
    on_message_delete
    on_bulk_message_delete
    on_guild_role_create
    on_guild_role_delete
    on_guild_role_update
    on_voice_state_update
}

model LoggingConfig {
    guild_id BigInt
    event_type LogEvent
    status Boolean @default(false)
    channel_id BigInt?

    guild Guild @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@id([guild_id, event_type])
}