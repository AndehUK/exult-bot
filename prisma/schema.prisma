datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator db {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 5
}

// Command Usage Tracking
model Usage {
    command_name String
    invoker_id   BigInt
    uses         Int

    created_at DateTime @default(now())

    @@id([command_name, invoker_id])
}

// Guilds the bot is currently joined to or has recently been removed from
model Guild {
    guild_id BigInt    @id
    expires  DateTime?
    premium  Boolean   @default(false)

    autorole_config AutoroleConfig?
    logging_configs LoggingConfig[]

    members  Member[]
    messages Message[]
}

enum UsageMode {
    share_user_id
    hide_user_id
    do_not_track
}

// Users the bot shares servers with (Global Data)
model User {
    user_id BigInt @id

    usage_mode UsageMode @default(share_user_id)

    member_data Member[]
}

// Users the bot shares servers with (Guild Data)
model Member {
    member_id BigInt
    guild_id  BigInt

    user  User  @relation(fields: [member_id], references: [user_id], onDelete: Cascade)
    guild Guild @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@id([member_id, guild_id])
    @@index([guild_id])
    @@index([member_id])
}

enum AutoroleMode {
    on_join
    on_verify
}

model AutoroleConfig {
    guild_id BigInt @id

    autorole_status Boolean      @default(false)
    autorole_mode   AutoroleMode @default(on_join)
    autoroles       Autorole[]

    guild Guild @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@index([guild_id])
}

model Autorole {
    guild_id BigInt
    role_id  BigInt

    config AutoroleConfig @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@id([guild_id, role_id])
    @@index([guild_id, role_id])
}

// Log Events
enum LogEvent {
    on_guild_channel_delete
    on_guild_channel_create
    on_guild_channel_update
    on_guild_update
    on_guild_emojis_update
    on_guild_stickers_update
    on_invite_create
    on_invite_delete
    on_webhooks_update
    on_member_join
    on_member_remove
    on_member_update
    on_user_update
    on_member_ban
    on_member_unban
    on_message_edit
    on_message_delete
    on_bulk_message_delete
    on_guild_role_create
    on_guild_role_delete
    on_guild_role_update
    on_voice_state_update
}

model LoggingConfig {
    guild_id   BigInt
    event_type LogEvent
    status     Boolean  @default(false)
    channel_id BigInt?

    guild Guild @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade)

    @@id([guild_id, event_type])
    @@index([guild_id])
}

model Message {
    guild_id BigInt
    user_id  BigInt
    name     String

    content String
    embeds  Embed[]

    guild Guild @relation(references: [guild_id], fields: [guild_id], onDelete: Cascade)

    @@id([guild_id, name])
    @@index([guild_id])
    @@index([user_id])
    @@index([name])
}

model EmbedAuthor {
    guild_id     BigInt
    message_name String

    author_name String
    author_icon String?
    author_url  String?

    embed Embed @relation(references: [guild_id, name], fields: [guild_id, message_name], onDelete: Cascade)

    @@id([guild_id, message_name])
    @@index([guild_id])
    @@index([guild_id, message_name])
}

model EmbedFooter {
    guild_id     BigInt
    message_name String

    footer_text String
    footer_icon String?

    embed Embed @relation(references: [guild_id, name], fields: [guild_id, message_name], onDelete: Cascade)

    @@id([guild_id, message_name])
    @@index([guild_id])
    @@index([guild_id, message_name])
}

model EmbedField {
    field_index Int
    embed_id    String

    field_name   String
    field_value  String
    field_inline Boolean @default(true)

    embed Embed @relation(references: [id], fields: [embed_id], onDelete: Cascade)

    @@id([field_index, embed_id])
    @@index([embed_id])
}

model Embed {
    id       String @unique @default(cuid())
    guild_id BigInt
    name     String

    title       String?
    description String?
    colour      Int?
    timestamp   DateTime?
    thumbnail   String?
    image       String?
    url         String?
    fields      EmbedField[]
    author      EmbedAuthor?
    footer      EmbedFooter?

    message Message @relation(references: [guild_id, name], fields: [guild_id, name], onDelete: Cascade)

    @@id([guild_id, name])
    @@index([guild_id, name])
}
